{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b9b884bc-f0e7-483e-b59a-b40e44709013",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def parse_szymczak_classes(raw_text):\n",
    "    raw_szymczak_classes = list(filter(lambda raw_szymczak_class: len(raw_szymczak_class) != 0, raw_text.split('-----\\n')))\n",
    "\n",
    "    szymczak_classes = list(parse_szymczak_class(raw_szymczak_class) for raw_szymczak_class in raw_szymczak_classes)\n",
    "    return szymczak_classes\n",
    "\n",
    "def parse_szymczak_class(raw_szymczak_class):\n",
    "        raw_szymczak_class = list(filter(lambda raw_szymczak_class_fixed_obj: len(raw_szymczak_class_fixed_obj) != 0, raw_szymczak_class.split('-\\n')))\n",
    "        szymczak_class = {}\n",
    "        for raw_szymczak_class_fixed_object in raw_szymczak_class:\n",
    "            object, endomorphisms = parse_szymczak_class_fixed_object(raw_szymczak_class_fixed_object)\n",
    "            szymczak_class[object] = endomorphisms\n",
    "        return szymczak_class\n",
    "\n",
    "def parse_szymczak_class_fixed_object(raw_szymczak_class_fixed_object):\n",
    "    raw_object, raw_endomorphisms = raw_szymczak_class_fixed_object.split(':\\n')\n",
    "    object = parse_object(raw_object)\n",
    "    object_length = len(object[1])\n",
    "    endomorphisms = parse_endomorphisms(raw_endomorphisms, object_length)\n",
    "    return object, endomorphisms\n",
    "\n",
    "def parse_object(raw_object):\n",
    "    raw_object = list(filter(lambda torsion_coeff: len(torsion_coeff) != 0, raw_object.split(' x ')))\n",
    "    raw_object = tuple([int(torsion_coeff[1:]) for torsion_coeff in raw_object])\n",
    "\n",
    "    elements = parse_elements(raw_object)\n",
    "    object = raw_object, elements\n",
    "    return object\n",
    "\n",
    "def parse_elements(raw_object):\n",
    "\n",
    "    def parse_elements_helper(raw_object, element, elements, index):\n",
    "        if index == len(raw_object):\n",
    "            elements.append(''.join(map(str, element)))\n",
    "        else:\n",
    "            for x in range(raw_object[index]):\n",
    "                element[index] = x\n",
    "                parse_elements_helper(raw_object, list(element), elements, index + 1)\n",
    "                \n",
    "    element = [0] * len(raw_object)\n",
    "    result = []\n",
    "    parse_elements_helper(raw_object, element, result, 0)\n",
    "    return tuple(result)\n",
    "\n",
    "\n",
    "def parse_endomorphisms(raw_endomorphisms, object_length):\n",
    "    raw_endomorphisms = list(filter(lambda raw_endomorphism: len(raw_endomorphism) != 0, raw_endomorphisms.split('\\n')))\n",
    "    return [parse_endomorphism(raw_endomorphism, object_length) for raw_endomorphism in raw_endomorphisms]\n",
    "\n",
    "def parse_endomorphism(raw_endomorphism, object_length):\n",
    "    raw_endomorphism = [int(entry) for entry in raw_endomorphism]\n",
    "    if len(raw_endomorphism) != object_length * object_length:\n",
    "         raise RuntimeError(\"this wasn't a matrix of the proper size!\")\n",
    "    else:\n",
    "        endomorphism = np.array(raw_endomorphism).reshape(object_length, object_length)\n",
    "        return endomorphism\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9c5d82ab-039e-4b46-be9a-a07dab40263a",
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = \"out\"\n",
    "file = open(filepath, 'r')\n",
    "raw_text = file.read()\n",
    "szymczak_classes = parse_szymczak_classes(raw_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4d1f8d9c-5768-498a-817d-e02af78e04ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 0]\n",
      " [1 0 0]\n",
      " [1 0 0]]\n",
      "((3,), ('0', '1', '2'))\n",
      "<class 'matplotlib.figure.Figure'>\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "endomorphism = list(szymczak_classes[0].values())[1][2]\n",
    "print(endomorphism)\n",
    "object = parse_object('Z3')\n",
    "print(object)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def plot_endomorphism(object, endomorphism, color_):\n",
    "    fig, ax = plt.subplots(figsize=(8, 8))\n",
    "    n = len(object[1])\n",
    "    labels = object[1]\n",
    "\n",
    "    for i in range(n):\n",
    "        for j in range(n):\n",
    "            color = color_ if endomorphism[i][j] == 1 else 'white'\n",
    "            rect = plt.Rectangle((j, n-i-1), 1, 1, facecolor=color, edgecolor='black', linewidth=2)\n",
    "            ax.add_patch(rect)\n",
    "\n",
    "    ax.set_xticks(np.arange(0.5, n, 1))\n",
    "    ax.set_yticks(np.arange(0.5, n, 1))\n",
    "    ax.set_xticklabels(labels, fontsize=40)\n",
    "    ax.set_yticklabels(labels[::-1], fontsize=40)  # Reverse the labels for y-axis\n",
    "    ax.xaxis.tick_top()  # Move x-axis to the top\n",
    "    ax.tick_params(axis='both', which='both', length=0)  # Remove ticks\n",
    "\n",
    "    plt.gca().invert_yaxis()  # Invert y-axis to match labels\n",
    "    \n",
    "    # Set axis limits to ensure all rectangles are fully visible\n",
    "    ax.set_xlim(0, n)\n",
    "    ax.set_ylim(0, n)\n",
    "\n",
    "    return plt.gcf()\n",
    "\n",
    "# Example Usage\n",
    "figure = plot_endomorphism(object, endomorphism, 'purple')\n",
    "print(type(figure))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4c954cda-8425-4e86-8865-44d669bbbdb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_szymczak_class_fixed_object(object, endomorphisms, color):\n",
    "    plotted_endomorphisms = [plot_endomorphism(object, endomorphism, color) for endomorphisms in endomorphisms]\n",
    "    return plotted_endomorphisms\n",
    "object = list(szymczak_classes[0].keys())[1]\n",
    "endomorphisms = szymczak_classes[0][object]\n",
    "figures = plot_szymczak_class_fixed_object(object, endomorphisms, 'purple')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "29c84145-5819-4a58-94f9-715a07243adf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "all images: 2\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from PIL import Image\n",
    "import io\n",
    "\n",
    "# Convert figures to images\n",
    "def figure_to_image(figure):\n",
    "    buf = io.BytesIO()\n",
    "    figure.savefig(buf, format='png')\n",
    "    buf.seek(0)\n",
    "    img = Image.open(buf)\n",
    "    return img\n",
    "images_in_a_row = 3\n",
    "\n",
    "images = [figure_to_image(figure) for figure in figures]\n",
    "width, height = images[0].size\n",
    "images = [images[i: i+images_in_a_row] for i in range(0, len(images), images_in_a_row)]\n",
    "images_in_a_col = len(images)\n",
    "\n",
    "merged_image = Image.new(\"RGB\", (images_in_a_row*width, images_in_a_col*height))\n",
    "\n",
    "# Paste the images onto the blank image\n",
    "print(\"all images:\", len(images))\n",
    "for j in range(images_in_a_col):\n",
    "    for i in range(len(images[j])):\n",
    "        merged_image.paste(images[j][i], (i*width, j*height))\n",
    "\n",
    "# Save the merged image\n",
    "merged_image.save(\"merged_image.jpg\")\n",
    "\n",
    "# Display the merged image (optional)\n",
    "merged_image.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8a9b3f2d-096f-4acf-b1f2-171975f81412",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import matplotlib.pyplot as plt\n",
    "# from PIL import Image\n",
    "# import io\n",
    "\n",
    "# # Assume `figure1`, `figure2`, and `figure3` are plt.figure objects generated by your code.\n",
    "\n",
    "# # Convert figures to images\n",
    "# def figure_to_image(figure):\n",
    "#     buf = io.BytesIO()\n",
    "#     figure.savefig(buf, format='png')\n",
    "#     buf.seek(0)\n",
    "#     img = Image.open(buf)\n",
    "#     return img\n",
    "\n",
    "# image1 = figure_to_image(figures[0])\n",
    "# image2 = figure_to_image(figures[1])\n",
    "# image3 = figure_to_image(figures[2])\n",
    "\n",
    "# # Resize images (optional, to ensure they have the same dimensions)\n",
    "# width, height = image1.size\n",
    "# image2 = image2.resize((width, height))\n",
    "# image3 = image3.resize((width, height))\n",
    "\n",
    "# # Create a blank image with the same dimensions\n",
    "# merged_image = Image.new(\"RGB\", (3*width, height))\n",
    "\n",
    "# # Paste the images onto the blank image\n",
    "# merged_image.paste(image1, (0, 0))\n",
    "# merged_image.paste(image2, (width, 0))\n",
    "# merged_image.paste(image3, (2*width, 0))\n",
    "\n",
    "# # Save the merged image\n",
    "# merged_image.save(\"merged_image.jpg\")\n",
    "\n",
    "# # Display the merged image (optional)\n",
    "# merged_image.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "571164b7-d39f-4a09-9841-a6ab0d01ac3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11]]\n"
     ]
    }
   ],
   "source": [
    "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n",
    "\n",
    "# Chop the list into sublists of length 5\n",
    "chunk_size = 5\n",
    "result = [my_list[i:i + chunk_size] for i in range(0, len(my_list), chunk_size)]\n",
    "\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a49fdb4-862e-4a33-823c-cae55c12db8f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
